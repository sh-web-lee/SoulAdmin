// vite.config.ts
import { URL, fileURLToPath } from 'node:url';
import process2 from 'node:process';
import path from 'node:path';
import process from 'node:process';
import {
  defineConfig,
  loadEnv
} from 'file:///E:/per/SoulAdmin/myblog-v3/node_modules/.pnpm/vite@5.2.12_@types+node@20.14.1_sass@1.77.4/node_modules/vite/dist/node/index.js';

// build/unplugin/index.ts
import vue from 'file:///E:/per/SoulAdmin/myblog-v3/node_modules/.pnpm/@vitejs+plugin-vue@5.0.5_vite@5.2.12_@types+node@20.14.1_sass@1.77.4__vue@3.4.27_typescript@5.4.5_/node_modules/@vitejs/plugin-vue/dist/index.mjs';

// build/unplugin/unocss.ts
import UnoCSS from 'file:///E:/per/SoulAdmin/myblog-v3/node_modules/.pnpm/unocss@0.60.4_postcss@5.2.18_rollup@4.18.0_vite@5.2.12_@types+node@20.14.1_sass@1.77.4_/node_modules/unocss/dist/vite.mjs';

// build/unplugin/unplugin.ts
import Components from 'file:///E:/per/SoulAdmin/myblog-v3/node_modules/.pnpm/unplugin-vue-components@0.27.0_@babel+parser@7.24.6_rollup@4.18.0_vue@3.4.27_typescript@5.4.5_/node_modules/unplugin-vue-components/dist/vite.js';
import AutoImport from 'file:///E:/per/SoulAdmin/myblog-v3/node_modules/.pnpm/unplugin-auto-import@0.17.6_@vueuse+core@10.10.0_vue@3.4.27_typescript@5.4.5___rollup@4.18.0/node_modules/unplugin-auto-import/dist/vite.js';
import { ElementPlusResolver } from 'file:///E:/per/SoulAdmin/myblog-v3/node_modules/.pnpm/unplugin-vue-components@0.27.0_@babel+parser@7.24.6_rollup@4.18.0_vue@3.4.27_typescript@5.4.5_/node_modules/unplugin-vue-components/dist/resolvers.js';
import { createSvgIconsPlugin } from 'file:///E:/per/SoulAdmin/myblog-v3/node_modules/.pnpm/vite-plugin-svg-icons@2.0.1_vite@5.2.12_@types+node@20.14.1_sass@1.77.4_/node_modules/vite-plugin-svg-icons/dist/index.mjs';
function setupUnocss() {
  return [UnoCSS()];
}
function setupUnplugin(viteEnv) {
  const { VITE_ICON_LOCAL_PREFIX } = viteEnv;
  const localIconPath = path.join(process.cwd(), 'src/assets/svg-icon');
  const plugins = [
    AutoImport({
      imports: ['vue', 'vue-router'],
      dts: 'src/typings/auto-import.d.ts',
      resolvers: [ElementPlusResolver()]
    }),
    Components({
      dts: 'src/typings/components.d.ts',
      types: [{ from: 'vue-router', names: ['RouterLink', 'RouterView'] }],
      resolvers: [ElementPlusResolver()]
    }),
    createSvgIconsPlugin({
      iconDirs: [localIconPath],
      symbolId: `${VITE_ICON_LOCAL_PREFIX}-[dir]-[name]`,
      /**
       * 自定义插入位置
       *
       * @default: body-last
       */
      inject: 'body-last',
      customDomId: '__SVG_ICON_LOCAL__'
    })
  ];
  return plugins;
}

// build/unplugin/index.ts
function setupVitePlugin(viteEnv) {
  const plugins = [vue(), ...setupUnocss(), ...setupUnplugin(viteEnv)];
  return plugins;
}

// src/utils/service.ts
function createServiceConfig(env) {
  const { VITE_SERVICE_BASE_URL, VITE_OTHER_SERVICE_BASE_URL } = env;
  let other = {};
  try {
    other = JSON.parse(VITE_OTHER_SERVICE_BASE_URL);
  } catch (error) {
    console.error('VITE_OTHER_SERVICE_BASE_URL is not a valid JSON string');
  }
  const httpConfig = {
    baseURL: VITE_SERVICE_BASE_URL,
    other
  };
  const otherHttpKeys = Object.keys(httpConfig.other);
  const otherConfig = otherHttpKeys.map(key => {
    return {
      key,
      baseURL: httpConfig.other[key],
      proxyPattern: createProxyPattern(key)
    };
  });
  const config = {
    baseURL: httpConfig.baseURL,
    proxyPattern: createProxyPattern(),
    other: otherConfig
  };
  return config;
}
function createProxyPattern(key) {
  if (!key) {
    return '/proxy-default';
  }
  return `/proxy-${key}`;
}

// build/config/proxy.ts
function createViteProxy(env, isDev) {
  const isEnableHttpProxy = isDev && env.VITE_HTTP_PROXY === 'Y';
  if (!isEnableHttpProxy) return void 0;
  const { baseURL, proxyPattern, other } = createServiceConfig(env);
  const proxy = createProxyItem({ baseURL, proxyPattern });
  other.forEach(item => {
    Object.assign(proxy, createProxyItem(item));
  });
  return proxy;
}
function createProxyItem(item) {
  const proxy = {};
  proxy[item.proxyPattern] = {
    target: item.baseURL,
    changeOrigin: true,
    rewrite: path2 => path2.replace(new RegExp(`^${item.proxyPattern}`), '')
  };
  return proxy;
}

// vite.config.ts
const __vite_injected_original_import_meta_url = 'file:///E:/per/SoulAdmin/myblog-v3/vite.config.ts';
const vite_config_default = defineConfig(configEnv => {
  const viteEnv = loadEnv(configEnv.mode, process2.cwd());
  return {
    resolve: {
      alias: {
        '@': fileURLToPath(new URL('./src', __vite_injected_original_import_meta_url)),
        '~': fileURLToPath(new URL('./', __vite_injected_original_import_meta_url))
      }
    },
    css: {
      preprocessorOptions: {
        scss: {
          additionalData: `@use "./src/styles/scss/global.scss" as *;`
        }
      }
    },
    plugins: setupVitePlugin(viteEnv),
    server: {
      host: '0.0.0.0',
      port: 9527,
      open: true,
      proxy: createViteProxy(viteEnv, configEnv.command === 'serve')
    }
  };
});
export { vite_config_default as default };
// # sourceMappingURL=data:application/json;base64,
